import streamlit as st
import google.generativeai as genai  

# Configura√ß√£o do t√≠tulo da p√°gina
st.set_page_config(page_title="Assistente de Diagn√≥stico", page_icon="ü©∫")

st.title("üîç Assistente de Diagn√≥stico")

# Link para gerar a chave API no Google Gemini
st.markdown(
    "[üîë Clique aqui para obter sua chave API da Google Gemini](https://ai.google.dev/)",
    unsafe_allow_html=True
)

# Chave API
api_key = st.text_input("Digite sua chave da API Gemini:", type="password")

def get_best_model():
    """Escolhe um modelo Gemini compat√≠vel e ativo."""
    preferred_models = ["gemini-pro", "gemini 1.5", "gemini-2.0-flash"]  

    try:
        models = genai.list_models()
        available_models = [model.name for model in models]
       
        st.success(f"‚úÖ Modelo selecionado: {model}")
        return model

        st.error("‚ùå Nenhum modelo compat√≠vel dispon√≠vel. Verifique sua conta no Google Cloud.")
        return None

    except Exception as e:
        st.error(f"‚ùå Erro ao listar os modelos dispon√≠veis: {e}")
        return None

# Verifica se a chave foi inserida
if api_key:
    st.success("‚úÖ Chave API inserida com sucesso! Agora, preencha os dados do paciente.")

    genai.configure(api_key=api_key)  

    model_name = get_best_model()
    
    if model_name:
        with st.form("diagnostico_form"):
            st.subheader("üìã Dados do Paciente")

            idade = st.number_input("Idade do paciente:", min_value=0, max_value=120, step=1)
            genero = st.selectbox("G√™nero:", ["Masculino", "Feminino", "Outro"])
            comorbidades = st.text_input("Comorbidades (ou 'sem comorbidades conhecidas'):") 

            st.subheader("ü©∫ Queixa Principal e Sintomas")
            queixa_principal = st.text_area("Queixa principal e dura√ß√£o:")
            sintomas = st.text_area("Liste os sintomas associados (separados por v√≠rgula):")
            sinais_vitais = st.text_area("Sinais vitais (se dispon√≠veis):")
            exame_fisico = st.text_area("Achados relevantes no exame f√≠sico:")
            exames = st.text_area("Exames laboratoriais ou de imagem (se dispon√≠veis):")

            enviar = st.form_submit_button("üîé Analisar")

        if enviar:
            prompt = f"""
            Analise a seguinte constela√ß√£o de sintomas para um poss√≠vel diagn√≥stico diferencial:

            Paciente: {idade} anos, {genero}, com {comorbidades}.

            Queixa principal: {queixa_principal}.

            Sintomas associados:
            - {sintomas.replace(',', '\n    - ')}

            Sinais vitais: {sinais_vitais}

            Achados relevantes no exame f√≠sico:
            - {exame_fisico}

            Exames laboratoriais ou de imagem (se dispon√≠veis):
            - {exames}

            Por favor:
                1. Liste os diagn√≥sticos diferenciais organizados por PROBABILIDADE, do mais prov√°vel ao menos prov√°vel, considerando os dados epidemiol√≥gicos e a apresenta√ß√£o cl√≠nica. Para cada diagn√≥stico, forne√ßa uma breve justificativa baseada nos sintomas e sinais apresentados.
        
                2. Em seguida, reorganize os mesmos diagn√≥sticos por GRAVIDADE, do mais grave (potencialmente fatal ou com necessidade de interven√ß√£o imediata) ao menos grave. Para cada diagn√≥stico, indique o tempo estimado para interven√ß√£o e poss√≠veis complica√ß√µes caso n√£o seja tratado adequadamente.
        
                3. Sugira os pr√≥ximos passos diagn√≥sticos mais apropriados para confirmar ou descartar cada uma das hip√≥teses principais.
        
                4. Indique se h√° sinais de alarme ou 'red flags' na apresenta√ß√£o que exigiriam aten√ß√£o imediata ou encaminhamento para emerg√™ncia.
                """

            try:
                with st.spinner("üß† Analisando..."):
                    model = genai.GenerativeModel(model_name)  # Usa apenas modelos compat√≠veis
                    response = model.generate_content(prompt)  

                    resposta = response.text  

                st.subheader("üìÑ Resultado da An√°lise:")
                st.markdown(resposta.replace("\n", "\n\n"))  
            
            except Exception as e:
                st.error(f"‚ùå Erro ao acessar a API Gemini: {e}")

else:
    st.warning("‚ö†Ô∏è Digite sua chave da API para come√ßar.")
